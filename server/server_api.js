/*
Exercice 6 : Associer un serveur HTML et un serveur API JSON
üí° Objectif :

Un serveur HTML (port 3000) qui sert les fichiers statiques.
Un serveur API JSON (port 4000) qui lit un fichier database.json et renvoie ses donn√©es.
Un script JavaScript qui fetch les donn√©es de l'API et les affiche dans le HTML.

üí° Structure :

/mon-projet
‚îÇ‚îÄ‚îÄ /public
‚îÇ   ‚îú‚îÄ‚îÄ index.html     (Page HTML principale)
‚îÇ   ‚îú‚îÄ‚îÄ style.css      (Fichier CSS pour le style)
‚îÇ   ‚îú‚îÄ‚îÄ script.js      (Script JS qui r√©cup√®re les donn√©es du JSON via fetch)
‚îÇ‚îÄ‚îÄ /server
‚îÇ   ‚îú‚îÄ‚îÄ server_html.js  (Serveur qui sert la page HTML)
‚îÇ   ‚îú‚îÄ‚îÄ server_api.js   (Serveur API qui lit et envoie le fichier JSON)
‚îÇ‚îÄ‚îÄ /data
‚îÇ   ‚îú‚îÄ‚îÄ database.json   (Fichier JSON servant de base de donn√©es)
‚îÇ‚îÄ‚îÄ package.json
‚îÇ‚îÄ‚îÄ README.md (Facultatif)


‚úÖ Bonus :

Ajouter une page d'administration pour ajouter des utilisateurs dans le JSON
G√©rer un formulaire HTML qui envoie des donn√©es √† l‚ÄôAPI (AJAX avec fetch)
Ajouter une route API pour modifier ou supprimer un utilisateur
Cr√©er un fichier de logs (logs.txt) qui enregistre chaque requ√™te
*/




//onst fs = require('fs');     // Module pour la gestion des fichiers

// Cr√©e un serveur HTTP

const http = require('http'); // Le module http de Node.js

const url = require('url'); // Le module url pour analyser les requ√™tes

const PORT_JSON = 4000;
const ROUTE = '/data';

// Exemple de donn√©es
const data = [
    { id: 1, name: 'Article 1', description: "Description de l'article 1" },
    { id: 2, name: 'Article 2', description: "Description de l'article 2" }
];



// Cr√©er le serveur
const server = http.createServer((req, res) => {

    // Analyser l'URL de la requ√™te

    if (req.method === 'OPTIONS') {
        // res.setHeader('Access-Control-Allow-Origin', '*');
        // res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Accept, Origin, Authorization');
        // res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
        res.writeHead(200);
        res.end();
        return;

    }

    // V√©rifier la m√©thode de la requ√™te et l'URL
    if (req.method === 'GET' && req.url === ROUTE) {
        // Renvoie les articles
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(data));
    } else {
        // Si la route n'est pas reconnue
        res.writeHead(404);
        res.end(JSON.stringify({ error: 'Route non trouv√©e' }));
    }
});

// √âcouter sur le port 3000
server.listen(PORT_JSON, () => {
    console.log(`Serveur API en cours d\'ex√©cution sur http://localhost:${PORT_JSON}`);
});