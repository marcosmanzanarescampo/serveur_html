/*********************************************************************************
Exercice 6 : Associer un serveur HTML et un serveur API JSON
üí° Objectif :

Un serveur HTML (port 3000) qui sert les fichiers statiques.
Un serveur API JSON (port 4000) qui lit un fichier database.json et renvoie ses donn√©es.
Un script JavaScript qui fetch les donn√©es de l'API et les affiche dans le HTML.

üí° Structure :

/mon-projet
‚îÇ‚îÄ‚îÄ /public
‚îÇ   ‚îú‚îÄ‚îÄ index.html     (Page HTML principale)
‚îÇ   ‚îú‚îÄ‚îÄ style.css      (Fichier CSS pour le style)
‚îÇ   ‚îú‚îÄ‚îÄ script.js      (Script JS qui r√©cup√®re les donn√©es du JSON via fetch)
‚îÇ‚îÄ‚îÄ /server
‚îÇ   ‚îú‚îÄ‚îÄ server_html.js  (Serveur qui sert la page HTML)
‚îÇ   ‚îú‚îÄ‚îÄ server_api.js   (Serveur API qui lit et envoie le fichier JSON)
‚îÇ‚îÄ‚îÄ /data
‚îÇ   ‚îú‚îÄ‚îÄ database.json   (Fichier JSON servant de base de donn√©es)
‚îÇ‚îÄ‚îÄ package.json
‚îÇ‚îÄ‚îÄ README.md (Facultatif)


‚úÖ Bonus :

Ajouter une page d'administration pour ajouter des utilisateurs dans le JSON
G√©rer un formulaire HTML qui envoie des donn√©es √† l‚ÄôAPI (AJAX avec fetch)
Ajouter une route API pour modifier ou supprimer un utilisateur
Cr√©er un fichier de logs (logs.txt) qui enregistre chaque requ√™te
*/
// *********************************************************************************



// *****************************************************
// global variables:

const PORT_HTML = 3002;
const PATH = '../public/';
const IMAGE_PATH = '../images/';
const http = require('http'); // Module HTTP  
const fs = require('fs');     // Module pour la gestion des fichiers

// *****************************************************



// functions: ******************************************
  


  // l'extension est une extension image?
  const isImage = function (ext){
    
    return (ext === 'jpg' || ext === 'jpeg' || ext === 'png' || ext === 'webp' || ext == 'avif'|| ext == 'ico');
    
  }
  
  
  
  // R√©cuperation de l'extension du fichier
  const fileExtension = function(file){
    return file.substring(file.lastIndexOf('.') + 1);
  };

  
  const createMIME = function(f){
    
    const fileExt = fileExtension(f);
    let mime = '';
    
    switch(fileExt){
      case 'html':
        
        mime = 'text/html';
        break;
        
        case 'css':
          
            mime = 'text/css';
            break;
            
            case 'js':
              
            mime = 'text/js';
            break;
            
            // Bonus!
            default:

              if (isImage(fileExt)){

                mime = `image/${fileExt}]`;

                
            }else{

              mime = 'text/plain';
              
            }
            break;
            
    }

    return mime;
  }

  // fonction qui fixe le PATH du fichier par rapport √† son extension
  const setFilePATH = function (file){

    if (isImage(fileExtension(file))) return IMAGE_PATH;
    else return PATH;

  }

  // *****************************************************







// Cr√©e un serveur HTTP
const server = http.createServer((req, res) => {
  
let file = req.url; 

  
  if (file === '/'){

      file = PATH + 'index.html';
      console.log(`trying to get file: ${file}`);

  }else{

      file = setFilePATH(file) + file.substring(file.indexOf('/') + 1);
      console.log(`trying to get file: ${file}`);
      

  }
  
  
  // Lit le fichier HTML
  fs.readFile(file, (err, data) => {
    if (err) {
      
      // Si erreur lors de la lecture du fichier, renvoyer une erreur 500
      res.writeHead(500, { 'Content-Type': 'text/plain' });
      res.end('Erreur de lecture du fichier.');
      return;
      
    }
    


  // Si le fichier est trouv√© et lu, renvoie le contenu avec le type MIME HTML



  // appel function createMIME

    const mime = createMIME(file);

    res.writeHead(200, {'Content-Type': `${mime}`});
    res.end(data); // Envoie le contenu du fichier
  });
  

});

// Le serveur √©coute sur le port <PORT>
server.listen(PORT_HTML, () => {
  console.log(`Serveur d√©marr√© sur http://localhost:${PORT_HTML}`);
});
